package com.stockmann.wc.data.catalog.beans;

import com.ibm.commerce.beans.SmartDataBean;
import com.ibm.commerce.command.CommandContext;
import com.ibm.commerce.datatype.TypedProperty;
import com.ibm.commerce.tools.resourcebundle.ResourceBundleProperties;
import com.stockmann.wc.tools.util.LogUtil;
import com.stockmann.wc.tools.utils.GeneralHelper;

import java.io.File;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.ArrayList;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.SAXParser;

import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.Attributes;


public class ExtCategoryDisplayBean implements SmartDataBean{
	private static final String CLASS_NAME = "ExtCategoryDisplayBean"; 
	private String extCatInUse;
	private static ResourceBundleProperties bundle;
	private String filePath;
	private String fileName;
	private ArrayList extCatEntries = new ArrayList();
	private int resultCount;
	private int pageSize;
	private String minPrice;	
	
	
	/**
	 * @return Returns the pageSize.
	 */
	public int getPageSize() {
		return pageSize;
	}
	/**
	 * @param pageSize The pageSize to set.
	 */
	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}
	public void populate(){
		final String METHOD_NAME = "populate"; 
		if(this.extCatInUse != null){
			try{
				bundle = GeneralHelper.getResourceBundle("descom.ExtCategoriesProperties");
				this.setFilePath(bundle.getProperty("LocalFilePath_"+this.extCatInUse));
				this.setFileName(bundle.getProperty("LocalFileName_"+this.extCatInUse));
			} catch(Exception e){
				LogUtil.log(Level.SEVERE, CLASS_NAME, METHOD_NAME, "Error when solving bundles.");
			}
			File file = new File(this.filePath+this.fileName);
			if(file.isFile() && file.canRead()){
				try{
					file = file.getCanonicalFile();
				} catch(Exception e){
					LogUtil.log(Level.SEVERE, CLASS_NAME, METHOD_NAME, "Error when getting canonical file.");
				}
				this.processXmlFile(file);
			}
		}
		else{
			//TODO should be some kind of default view to show if extCategory can't be solved, error message or something
			LogUtil.log(Level.SEVERE, CLASS_NAME, METHOD_NAME, "extCatInUse WCParam is not set, should be example EXTCAT_SONERA_1");
		}
		// TODO Auto-generated constructor stub
	}
	
	/**
	 * @param file
	 * @return
	 */
	public void processXmlFile(File file) {
		final String METHOD_NAME = "processFeed";
		try {
			SAXParserFactory sf = SAXParserFactory.newInstance();
			sf.setNamespaceAware(true);
			SAXParser sp = sf.newSAXParser();
			sp.parse(file, new ProductsFeedHandler(this.extCatEntries));
		} catch (Exception e) {
			LogUtil.log(Level.SEVERE, CLASS_NAME, METHOD_NAME, "File: " + file + "; " + LogUtil.toString(e));
			throw new RuntimeException(METHOD_NAME + " " + LogUtil.toString(e));
		}
		this.resultCount = this.extCatEntries.size();
	}
	
	/**
	 * 
	 */
	public static class ProductsFeedHandler extends DefaultHandler {
		private ArrayList extCatEntries;		
		private boolean name = false;
		private boolean urlForConsumer = false;
		private boolean image = false;
		private boolean recommendedPrice = false;
		private boolean pricePlans = false;
		private boolean pricePlan = false;
		private boolean price = false;
		
		private ExtCatEntryHelper extCatHelper;
		private StringBuffer buf;
		private ArrayList pricePlansArr;
		private ExtCatEntryHelper.PricePlan pricePlanObj;
		private ExtCatEntryHelper.Price priceObj;
		private String installment;
		private String debugName;
				
		public ProductsFeedHandler(ArrayList extCatEntries) {
			this.extCatEntries = extCatEntries;
		}
		
		public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {			
			final String METHOD_NAME = "startElement";
			this.buf = new StringBuffer();
			if(qName.equalsIgnoreCase("PHONE")){
				this.extCatHelper = new ExtCatEntryHelper();
			}
			if(qName.equalsIgnoreCase("NAME")) name = true;
			if(qName.equalsIgnoreCase("URLFORCONSUMER")) urlForConsumer = true;
			if(qName.equalsIgnoreCase("IMAGE")) image = true;
			if(qName.equalsIgnoreCase("RECOMMENDEDPRICE")) recommendedPrice = true;
			if(qName.equalsIgnoreCase("PRICEPLANS")){
				this.pricePlansArr = new ArrayList();
				pricePlans = true;
			}
			if(qName.equalsIgnoreCase("PRICEPLAN")){
				pricePlanObj = this.extCatHelper.createPricePlan();
				pricePlanObj.setInstallment(attributes.getValue("installment"));
				this.installment = attributes.getValue("installment");
				pricePlan = true;
			}
			if(qName.equalsIgnoreCase("PRICE")){
				priceObj = this.extCatHelper.createPrice();
				try{
					priceObj.setAgreementPeriodAsMonths(Integer.parseInt(attributes.getValue("agreementPeriodAsMonths")));
				} catch(Exception e){
					LogUtil.log(Level.SEVERE, CLASS_NAME, METHOD_NAME, "Could not parse int from price string, phone: " + this.debugName+ ", error: " + LogUtil.toString(e));
				}
				priceObj.setInvoiceInterval(attributes.getValue("invoiceInterval"));
				priceObj.setInstallment(this.installment);
				price = true;
			}
		}
		
		public void characters(char[] ch, int start, int length) throws SAXException {
			 if (this.buf!=null) {
		        for (int i=start; i<start+length; i++) {
		        	this.buf.append(ch[i]);
		        }
		    }

		}
		
		public void endElement(String uri, String localName, String qName) throws SAXException {
			final String METHOD_NAME = "endElement";
			if(name){
				this.extCatHelper.setName(this.buf.toString());
				this.debugName = this.extCatHelper.getName();				
				name = false;
			}
			if(urlForConsumer){
				//TODO iffittely eri urli parametreille jos ei suoraan xml:ssä, nyt vaan lisätään soneran partneritunnus				
				if(this.buf.toString().indexOf("&")>-1){
					this.extCatHelper.setUrlForConsumer(this.buf.toString()+"&"+bundle.getProperty("MerchantParameterSonera"));
				}
				else this.extCatHelper.setUrlForConsumer(this.buf.toString()+"?"+bundle.getProperty("MerchantParameterSonera"));
				urlForConsumer = false;
			}
			/*Sonera has url in their images->image element*/
			if(image){
				this.extCatHelper.addImage(this.buf.toString());
				image = false;
			}
			if(recommendedPrice){
				try{
					this.extCatHelper.setRecommendedPrice(Double.parseDouble(this.buf.toString()));
				} catch(Exception e){
					LogUtil.log(Level.SEVERE, CLASS_NAME, METHOD_NAME, "Could not parse double from price string" + LogUtil.toString(e));
				}
				recommendedPrice = false;
			}
			if(pricePlans){
				this.extCatHelper.setPricePlans(pricePlansArr);
				pricePlans = false;
			}
			if(pricePlan){
				this.pricePlansArr.add(this.pricePlanObj);
				pricePlan = false;
			}
			if(price){
				double amount = 0;
				try{
					amount = Double.parseDouble(this.buf.toString());
					this.priceObj.setAmount(amount);
					if(this.priceObj.getInstallment().equalsIgnoreCase("MONTHLY") && this.priceObj.getInvoiceInterval().equalsIgnoreCase("MONTHLY")){					
						this.extCatHelper.resolveMinMonthlyPayment(amount, priceObj.getAgreementPeriodAsMonths());					
					}
				} catch(Exception e){
					this.priceObj.setAmount(amount);
					LogUtil.log(Level.SEVERE, CLASS_NAME, METHOD_NAME, "Could not parse double from price string" + LogUtil.toString(e));
				}
				this.pricePlanObj.addPrice(this.priceObj);
				price = false;
			}
			if(qName.equalsIgnoreCase("PHONE")){
				this.extCatEntries.add(this.extCatHelper);
			}
		}
	}
	
	/**
	 * @return Returns the resultCount.
	 */
	public int getResultCount() {
		return resultCount;
	}
	/**
	 * @param resultCount The resultCount to set.
	 */
	public void setResultCount(int resultCount) {
		this.resultCount = resultCount;
	}
	
	/* (non-Javadoc)
	 * @see com.ibm.commerce.beans.SmartDataBean#getCommandContext()
	 */
	public CommandContext getCommandContext() {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.ibm.commerce.beans.SmartDataBean#setCommandContext(com.ibm.commerce.command.CommandContext)
	 */
	public void setCommandContext(CommandContext arg0) {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see com.ibm.commerce.beans.InputDataBean#getRequestProperties()
	 */
	public TypedProperty getRequestProperties() {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.ibm.commerce.beans.InputDataBean#setRequestProperties(com.ibm.commerce.datatype.TypedProperty)
	 */
	public void setRequestProperties(TypedProperty arg0) throws Exception {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * @return Returns the extCatInUse.
	 */
	public String getExtCatInUse() {
		return extCatInUse;
	}
	/**
	 * @param extCatInUse The extCatInUse to set.
	 */
	public void setExtCatInUse(String extCatInUse) {
		this.extCatInUse = extCatInUse;
	}
	/**
	 * @return Returns the filePath.
	 */
	public String getFilePath() {
		return filePath;
	}
	/**
	 * @param filePath The filePath to set.
	 */
	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}
	/**
	 * @return Returns the fileName.
	 */
	public String getFileName() {
		return fileName;
	}
	/**
	 * @param fileName The fileName to set.
	 */
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	/**
	 * @return Returns the extCatEntries.
	 */
	public ArrayList getExtCatEntries() {
		return extCatEntries;
	}
	/**
	 * @param extCatEntries The extCatEntries to set.
	 */
	public void setExtCatEntries(ArrayList extCatEntries) {
		this.extCatEntries = extCatEntries;
	}
	/**
	 * @return Returns the minPrice.
	 */
	public String getMinPrice() {
		return minPrice;
	}
	/**
	 * @param minPrice The minPrice to set.
	 */
	public void setMinPrice(String minPrice) {
		this.minPrice = minPrice;
	}
}